name: Draft & Publish Android Release Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, 'Merge pull request') }}

    steps:
      - name: Extract PR Number from commit message
        id: pr_number
        run: |
          PR_NUMBER=$(echo "${{ github.event.head_commit.message }}" | grep -o '#[0-9]\+' | sed 's/#//')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Fetch original PR details via GitHub API
        id: fetch_pr
        uses: actions/github-script@v6
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(process.env.PR_NUMBER, 10),
            });
            core.setOutput('pr_head_ref', pr.data.head.ref);
            core.setOutput('pr_base_ref', pr.data.base.ref);

      - name: Verify that the source branch starts with 'releases/And-'
        if: ${{ startsWith(steps.fetch_pr.outputs.pr_head_ref, 'releases/And-') }}
        run: echo "Source branch matches:'${{ steps.fetch_pr.outputs.pr_head_ref }}'"

      - name: Abort if branch pattern does not match
        if: ${{ !startsWith(steps.fetch_pr.outputs.pr_head_ref, 'releases/And-') }}
        run: |
          echo "Skipping workflow: source branch '${{ steps.fetch_pr.outputs.pr_head_ref }}' doesn't match."
          exit 0

      - name: Sanitize branch name and set version
        run: |
          RAW_BRANCH="${{ steps.fetch_pr.outputs.pr_head_ref }}"
          SANITIZED=$(echo "$RAW_BRANCH" | tr -c '[:alnum:]._/-' '_')
          echo "SANITIZED_BRANCH=$SANITIZED" >> $GITHUB_ENV
          SAFE=${SANITIZED#releases/And-}
          SAFE=${SAFE%%-*}
          VERSION=$(echo "$SAFE" | sed 's/_$//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Save the full branch name for release naming
          TARGET_BRANCH="${{ steps.fetch_pr.outputs.pr_base_ref }}"
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

      - name: Checkout repository at post-merge commit
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.after }}
          fetch-depth: 0

      - name: Set Git identity
        run: |
          git config --global user.email "${GITHUB_ACTOR}@gumtreegroup.com.au"
          git config --global user.name "${GITHUB_ACTOR}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Compute previous release tag
        id: prev
        run: |
          PREV=$(git tag --sort=-creatordate \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
            | grep -v "^${VERSION}$" \
            | head -n1 || true)
          echo "PREVIOUS_TAG=$PREV" >> $GITHUB_ENV
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Create annotated tag & push
        run: |
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Generate changelog via Conventional Commits
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fromTag: ${{ env.VERSION }}
          toTag: ${{ env.PREVIOUS_TAG }}
          writeToFile: false
          changelogFilePath: CHANGELOG.md
          includeRefIssues: true
          useGitmojis: true
          reverseOrder: false
          includeInvalidCommits: true
          excludeTypes: ""

      - name: Create GitHub release
        uses: softprops/action-gh-release@f2352b97da0095b4dbbd885a81023e3deabf4fef
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.TARGET_BRANCH }}"
          body: ${{ steps.changelog.outputs.changes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




