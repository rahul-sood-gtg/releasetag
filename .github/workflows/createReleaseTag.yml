name: Draft & Publish Android Release Tag


on:
  push:
   
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    # This 'if' condition now correctly matches the commit message
    # generated by GitHub's 'rebase and merge' feature.
    if: startsWith(github.event.head_commit.message, 'Merge pull request #')

    steps:
      - name: Extract PR Number from commit message
        id: pr_number
        run: |
          # The PR number is extracted from the automatically generated merge commit message.
          PR_NUMBER=$(echo "${{ github.event.head_commit.message }}" | grep -o '#[0-9]\+' | sed 's/#//')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Fetch original PR details via GitHub API
        id: fetch_pr
        uses: actions/github-script@v6
        with:
          script: |
            // Use the GitHub API to get the original pull request details, which
            // contain the correct source branch name.
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(process.env.PR_NUMBER, 10),
            });
            core.setOutput('pr_head_ref', pr.data.head.ref);
            core.setOutput('pr_base_ref', pr.data.base.ref);
          
      - name: Verify that the source branch starts with 'releases/And-'
        # This crucial step checks if the source branch name matches your required pattern.
        # It fails the job if it's not, ensuring the release process only runs for
        # the correct branches.
        if: ${{ !startsWith(steps.fetch_pr.outputs.pr_head_ref, 'releases/And-') }}
        run: |
          echo "The source branch '${{ steps.fetch_pr.outputs.pr_head_ref }}' does not match the required pattern. Skipping the rest of the workflow."
          exit 1
      
      - name: Set environment variables for branch and version
        run: |
          RAW_BRANCH="${{ steps.fetch_pr.outputs.pr_head_ref }}"
          SANITIZED=$(echo "$RAW_BRANCH" | tr -c '[:alnum:]._/-' '_')
          echo "SANITIZED_BRANCH=$SANITIZED" >> $GITHUB_ENV
          
          SAFE=${SANITIZED#releases/And-}
          SAFE=${SAFE%%-*}
          VERSION=$(echo "$SAFE" | sed 's/_$//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # The TARGET_BRANCH is needed for the release name.
          TARGET_BRANCH="${{ steps.fetch_pr.outputs.pr_base_ref }}"
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

      - name: Checkout repository at post-merge commit
        uses: actions/checkout@v3
        with:
          # `github.event.after` points to the SHA of the new commit on main.
          ref: ${{ github.event.after }}
          fetch-depth: 0

      - name: Set Git identity
        run: |
          # Use the GitHub Actions bot user for the git identity.
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Compute previous release tag
        id: prev
        run: |
          PREV=$(git tag --sort=-creatordate \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' \
            | grep -v "^${VERSION}$" \
            | head -n1 || true)
          echo "PREVIOUS_TAG=$PREV" >> $GITHUB_ENV
          echo "previous_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Create annotated tag & push
        run: |
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Generate changelog via Conventional Commits
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fromTag: ${{ env.PREVIOUS_TAG }}
          toTag: ${{ env.VERSION }}
          writeToFile: false
          includeRefIssues: true
          useGitmojis: true
          reverseOrder: false
          includeInvalidCommits: true
          excludeTypes: ""

      - name: Create GitHub release
        uses: softprops/action-gh-release@f2352b97da0095b4dbbd885a81023e3deabf4fef
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          body: ${{ steps.changelog.outputs.changes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


